require('dotenv').config();
const express = require('express');
const cors = require('cors');
const { Telegraf, Markup } = require('telegraf');
const path = require('path');

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.static(path.join(__dirname, 'public')));

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new Telegraf(process.env.AAGL1KF81EWrsuZNHGDF5csjvLXCgCZzico);

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
const schedules = new Map();
const workRecords = new Map();
const users = new Map();

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
function generateSampleData() {
    const sampleSchedule = [
        {
            id: 1,
            date: new Date().toISOString().split('T')[0],
            start: '09:00',
            end: '18:00',
            place: '–ì–ª–∞–≤–Ω—ã–π –æ—Ñ–∏—Å',
            confirmed: true,
            type: 'work'
        }
    ];

    schedules.set(123456789, sampleSchedule);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —á–∞—Å–æ–≤
function calculateWorkHours(startTime, endTime) {
    const [startHour, startMinute] = startTime.split(':').map(Number);
    const [endHour, endMinute] = endTime.split(':').map(Number);
    
    const startTotal = startHour * 60 + startMinute;
    const endTotal = endHour * 60 + endMinute;
    
    let diff = endTotal - startTotal;
    if (diff < 0) diff += 24 * 60; // –ï—Å–ª–∏ —Ä–∞–±–æ—Ç–∞–ª–∏ —á–µ—Ä–µ–∑ –ø–æ–ª–Ω–æ—á—å
    
    const hours = Math.floor(diff / 60);
    const minutes = diff % 60;
    
    return { hours, minutes, total: diff };
}

// API Routes

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –∏ –∑–∞–ø–∏—Å–µ–π –æ —Ä–∞–±–æ—Ç–µ
app.get('/api/schedule/:userId', (req, res) => {
    try {
        const userId = parseInt(req.params.userId);
        const period = req.query.period || 'week';
        
        const userSchedule = schedules.get(userId) || [];
        const userWorkRecords = workRecords.get(userId) || [];
        
        // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –∏ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–ø–∏—Å–∏
        const combinedData = userSchedule.map(shift => {
            const actualRecord = userWorkRecords.find(record => 
                record.date === shift.date && record.type === 'work'
            );
            
            return {
                ...shift,
                actualStart: actualRecord?.startTime,
                actualEnd: actualRecord?.endTime,
                actualHours: actualRecord?.hours,
                recorded: !!actualRecord
            };
        });
        
        res.json({
            success: true,
            data: combinedData,
            workRecords: userWorkRecords,
            total: combinedData.length
        });
        
    } catch (error) {
        console.error('Error getting schedule:', error);
        res.status(500).json({
            success: false,
            error: 'Internal server error'
        });
    }
});

// –ó–∞–ø–∏—Å—å –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —á–∞—Å–æ–≤
app.post('/api/hours/record', (req, res) => {
    try {
        const { userId, date, startTime, endTime, notes } = req.body;
        
        if (!userId || !date || !startTime || !endTime) {
            return res.status(400).json({
                success: false,
                error: 'Missing required fields'
            });
        }
        
        const userRecords = workRecords.get(parseInt(userId)) || [];
        const { hours, minutes, total } = calculateWorkHours(startTime, endTime);
        
        const newRecord = {
            id: Date.now(),
            date,
            startTime,
            endTime,
            hours,
            minutes,
            totalMinutes: total,
            notes: notes || '',
            recordedAt: new Date().toISOString(),
            type: 'work'
        };
        
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∑–∞–ø–∏—Å—å –Ω–∞ —ç—Ç—É –¥–∞—Ç—É, –µ—Å–ª–∏ –µ—Å—Ç—å
        const filteredRecords = userRecords.filter(record => record.date !== date);
        filteredRecords.push(newRecord);
        
        workRecords.set(parseInt(userId), filteredRecords);
        
        res.json({
            success: true,
            data: newRecord,
            message: 'Hours recorded successfully'
        });
        
    } catch (error) {
        console.error('Error recording hours:', error);
        res.status(500).json({
            success: false,
            error: 'Internal server error'
        });
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —á–∞—Å–∞–º
app.get('/api/hours/stats/:userId', (req, res) => {
    try {
        const userId = parseInt(req.params.userId);
        const period = req.query.period || 'month';
        const userRecords = workRecords.get(userId) || [];
        
        const now = new Date();
        let filteredRecords = userRecords;
        
        if (period !== 'all') {
            const filterDate = new Date();
            if (period === 'week') filterDate.setDate(now.getDate() - 7);
            if (period === 'month') filterDate.setMonth(now.getMonth() - 1);
            if (period === 'year') filterDate.setFullYear(now.getFullYear() - 1);
            
            filteredRecords = userRecords.filter(record => 
                new Date(record.date) >= filterDate
            );
        }
        
        const totalHours = filteredRecords.reduce((sum, record) => sum + record.hours, 0);
        const totalMinutes = filteredRecords.reduce((sum, record) => sum + record.minutes, 0);
        const totalRecords = filteredRecords.length;
        
        const dailyAverage = totalRecords > 0 ? (totalHours + totalMinutes / 60) / totalRecords : 0;
        
        res.json({
            success: true,
            data: {
                totalHours: Math.floor(totalHours + totalMinutes / 60),
                totalRecords,
                dailyAverage: dailyAverage.toFixed(1),
                records: filteredRecords
            }
        });
        
    } catch (error) {
        console.error('Error getting hours stats:', error);
        res.status(500).json({
            success: false,
            error: 'Internal server error'
        });
    }
});

// Telegram Bot Handlers

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.start((ctx) => {
    const userId = ctx.from.id;
    users.set(userId, ctx.from);
    
    ctx.reply(
        `üëã –ü—Ä–∏–≤–µ—Ç, ${ctx.from.first_name}!\n\n` +
        `–Ø –±–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ:\n` +
        `‚Ä¢ üìù –ó–∞–ø–∏—Å—ã–≤–∞—Ç—å –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —á–∞—Å—ã\n` +
        `‚Ä¢ üìä –°–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n` +
        `‚Ä¢ üìÖ –£–ø—Ä–∞–≤–ª—è—Ç—å –≥—Ä–∞—Ñ–∏–∫–æ–º —Å–º–µ–Ω\n\n` +
        `–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞!`,
        {
            reply_markup: {
                keyboard: [
                    [{ text: "üìù –ó–∞–ø–∏—Å–∞—Ç—å —á–∞—Å—ã", web_app: { url: process.env.FRONTEND_URL } }],
                    [{ text: "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", web_app: { url: process.env.FRONTEND_URL + "#stats" } }],
                    [{ text: "üìÖ –ú–æ–π –≥—Ä–∞—Ñ–∏–∫", web_app: { url: process.env.FRONTEND_URL } }]
                ],
                resize_keyboard: true
            }
        }
    );
});

// –ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø–∏—Å–∏ —á–∞—Å–æ–≤
bot.command('hours', (ctx) => {
    ctx.reply(
        'üïê –ó–∞–ø–∏—Å—å –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —á–∞—Å–æ–≤\n\n–í–≤–µ–¥–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n' +
        '<code>09:00 18:30 –ó–∞–º–µ—Ç–∫–∞</code>\n\n' +
        '–ü—Ä–∏–º–µ—Ä: <code>09:00 18:30 –†–∞–±–æ—Ç–∞ –Ω–∞–¥ –ø—Ä–æ–µ–∫—Ç–æ–º</code>',
        {
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: [[
                    {
                        text: 'üìÖ –ó–∞–ø–∏—Å–∞—Ç—å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è',
                        callback_data: 'record_today'
                    }
                ]]
            }
        }
    );
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –≤—Ä–µ–º–µ–Ω–µ–º
bot.on('text', (ctx) => {
    const text = ctx.message.text.trim();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏: "09:00 18:30 –ó–∞–º–µ—Ç–∫–∞"
    const timeRegex = /^(\d{1,2}:\d{2})\s+(\d{1,2}:\d{2})(?:\s+(.+))?$/;
    const match = text.match(timeRegex);
    
    if (match) {
        const startTime = match[1];
        const endTime = match[2];
        const notes = match[3] || '';
        
        const userId = ctx.from.id;
        const today = new Date().toISOString().split('T')[0];
        
        const { hours, minutes } = calculateWorkHours(startTime, endTime);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å
        const userRecords = workRecords.get(userId) || [];
        const newRecord = {
            id: Date.now(),
            date: today,
            startTime,
            endTime,
            hours,
            minutes,
            notes,
            recordedAt: new Date().toISOString()
        };
        
        userRecords.push(newRecord);
        workRecords.set(userId, userRecords);
        
        ctx.reply(
            `‚úÖ –ß–∞—Å—ã –∑–∞–ø–∏—Å–∞–Ω—ã!\n\n` +
            `üìÖ –î–∞—Ç–∞: ${today}\n` +
            `üïê –í—Ä–µ–º—è: ${startTime} - ${endTime}\n` +
            `‚è± –û—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ: ${hours}—á ${minutes}–º\n` +
            `üìù –ó–∞–º–µ—Ç–∫–∞: ${notes || '–Ω–µ—Ç'}`,
            {
                reply_markup: {
                    inline_keyboard: [[
                        {
                            text: 'üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É',
                            web_app: { url: process.env.FRONTEND_URL + "#stats" }
                        }
                    ]]
                }
            }
        );
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∫–Ω–æ–ø–æ–∫
bot.action('record_today', (ctx) => {
    ctx.deleteMessage();
    ctx.reply(
        '–í–≤–µ–¥–∏ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n' +
        '<code>09:00 18:30</code>',
        { parse_mode: 'HTML' }
    );
});

// –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
bot.command('stats', (ctx) => {
    const userId = ctx.from.id;
    const userRecords = workRecords.get(userId) || [];
    
    if (userRecords.length === 0) {
        ctx.reply('üìä –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.');
        return;
    }
    
    const totalHours = userRecords.reduce((sum, record) => sum + record.hours, 0);
    const totalMinutes = userRecords.reduce((sum, record) => sum + record.minutes, 0);
    const totalHoursFormatted = (totalHours + totalMinutes / 60).toFixed(1);
    
    ctx.reply(
        `üìä –¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n` +
        `‚úÖ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${userRecords.length}\n` +
        `‚è± –í—Å–µ–≥–æ —á–∞—Å–æ–≤: ${totalHoursFormatted}\n` +
        `üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–ø–∏—Å—å: ${userRecords[userRecords.length - 1].date}`,
        {
            reply_markup: {
                inline_keyboard: [[
                    {
                        text: 'üìà –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
                        web_app: { url: process.env.FRONTEND_URL + "#stats" }
                    }
                ]]
            }
        }
    );
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
async function startServer() {
    generateSampleData();
    
    await bot.launch();
    console.log('ü§ñ Telegram bot started');
    
    app.listen(PORT, () => {
        console.log(`üöÄ Server running on port ${PORT}`);
        console.log(`üìä API available at http://localhost:${PORT}/api`);
    });
}

process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));

startServer().catch(console.error);
